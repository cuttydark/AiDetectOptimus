import streamlit as st
import re
from collections import Counter

class DetectorContenidoIA:
    """Detector de contenido generado por IA"""
    
    def analizar_patrones_linguisticos(self, texto: str) -> dict:
        indicadores = {
            'puntuacion_ia': 0,
            'se√±ales': []
        }
        
        # 1. Longitud de oraciones uniforme
        oraciones = re.split(r'[.!?]+', texto)
        oraciones = [o.strip() for o in oraciones if o.strip()]
        
        if oraciones:
            longitudes = [len(o.split()) for o in oraciones]
            desviacion = max(longitudes) - min(longitudes) if longitudes else 0
            
            if desviacion < 5 and len(oraciones) > 3:
                indicadores['puntuacion_ia'] += 15
                indicadores['se√±ales'].append('Longitud de oraciones muy uniforme')
        
        # 2. Uso excesivo de transiciones
        transiciones = ['adem√°s', 'asimismo', 'por lo tanto', 'en consecuencia', 
                       'sin embargo', 'no obstante', 'en primer lugar', 'finalmente']
        
        texto_lower = texto.lower()
        count_transiciones = sum(texto_lower.count(t) for t in transiciones)
        
        if count_transiciones > len(oraciones) * 0.3:
            indicadores['puntuacion_ia'] += 20
            indicadores['se√±ales'].append('Uso excesivo de conectores formales')
        
        # 3. Estructura sistem√°tica
        estructura_sistematica = bool(re.search(r'\n\s*[-‚Ä¢]\s+', texto)) or \
                                bool(re.search(r'\d+\.\s+[A-Z]', texto))
        
        if estructura_sistematica:
            indicadores['puntuacion_ia'] += 10
            indicadores['se√±ales'].append('Estructura muy organizada/sistem√°tica')
        
        # 4. Vocabulario t√©cnico gen√©rico
        palabras_tecnicas = ['implementar', 'optimizar', 'eficiente', 
                           'estrategia', 'objetivo', 'indicador', 
                           'proceso', 'desarrollo']
        
        count_tecnicas = sum(texto_lower.count(p) for p in palabras_tecnicas)
        
        if count_tecnicas > 5:
            indicadores['puntuacion_ia'] += 15
            indicadores['se√±ales'].append('Alto uso de vocabulario t√©cnico gen√©rico')
        
        # 5. Texto largo sin errores
        palabras = texto.split()
        if len(palabras) > 100:
            indicadores['puntuacion_ia'] += 10
            indicadores['se√±ales'].append('Texto extenso sin errores aparentes')
        
        # 6. Repetici√≥n de estructuras
        inicios_oracion = [o.split()[0] for o in oraciones if o.split()]
        if len(inicios_oracion) > 3:
            repeticiones = len(inicios_oracion) - len(set(inicios_oracion))
            if repeticiones > len(inicios_oracion) * 0.3:
                indicadores['puntuacion_ia'] += 15
                indicadores['se√±ales'].append('Patrones repetitivos en inicio de oraciones')
        
        indicadores['puntuacion_ia'] = min(indicadores['puntuacion_ia'], 100)
        
        return indicadores
    
    def detectar(self, texto: str) -> dict:
        if len(texto.strip()) < 50:
            return {
                'error': 'El texto debe tener al menos 50 caracteres',
                'longitud': len(texto)
            }
        
        resultado = self.analizar_patrones_linguisticos(texto)
        puntuacion = resultado['puntuacion_ia']
        
        if puntuacion < 30:
            veredicto = 'Muy probablemente escrito por humano'
            color = 'üü¢'
        elif puntuacion < 50:
            veredicto = 'Probablemente escrito por humano'
            color = 'üü°'
        elif puntuacion < 70:
            veredicto = 'Incierto - puede ser humano o IA'
            color = 'üü†'
        elif puntuacion < 85:
            veredicto = 'Probablemente generado por IA'
            color = 'üî¥'
        else:
            veredicto = 'Muy probablemente generado por IA'
            color = 'üî¥'
        
        return {
            'veredicto': veredicto,
            'color': color,
            'puntuacion_ia': round(puntuacion, 2),
            'se√±ales_detectadas': resultado['se√±ales'],
            'total_palabras': len(texto.split())
        }


# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Detector de Contenido IA",
    page_icon="ü§ñ",
    layout="wide"
)

# T√≠tulo y descripci√≥n
st.title("ü§ñ Detector de Contenido Generado por IA")
st.markdown("""
Esta aplicaci√≥n analiza textos para detectar si fueron generados por Inteligencia Artificial.
Utiliza an√°lisis de patrones ling√º√≠sticos sin necesidad de APIs externas.
""")

# √Årea de texto
texto_input = st.text_area(
    "Pega aqu√≠ el texto que quieres analizar:",
    height=300,
    placeholder="Escribe o pega al menos 50 caracteres de texto..."
)

# Bot√≥n de an√°lisis
if st.button("üîç Analizar Texto", type="primary"):
    if texto_input:
        detector = DetectorContenidoIA()
        resultado = detector.detectar(texto_input)
        
        if 'error' in resultado:
            st.error(f"‚ùå {resultado['error']}")
        else:
            # Mostrar resultados
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    label="Puntuaci√≥n IA",
                    value=f"{resultado['puntuacion_ia']}%"
                )
            
            with col2:
                st.metric(
                    label="Total Palabras",
                    value=resultado['total_palabras']
                )
            
            with col3:
                st.metric(
                    label="Se√±ales Detectadas",
                    value=len(resultado['se√±ales_detectadas'])
                )
            
            # Veredicto
            st.markdown("---")
            st.subheader(f"{resultado['color']} Veredicto")
            st.info(resultado['veredicto'])
            
            # Se√±ales detectadas
            if resultado['se√±ales_detectadas']:
                st.markdown("---")
                st.subheader("üîç Se√±ales Detectadas")
                for se√±al in resultado['se√±ales_detectadas']:
                    st.markdown(f"‚Ä¢ {se√±al}")
            
            # Barra de progreso
            st.markdown("---")
            st.subheader("üìä Nivel de Confianza IA")
            st.progress(resultado['puntuacion_ia'] / 100)
    else:
        st.warning("‚ö†Ô∏è Por favor, introduce un texto para analizar")

# Sidebar con informaci√≥n
with st.sidebar:
    st.header("‚ÑπÔ∏è Acerca de")
    st.markdown("""
    ### ¬øC√≥mo funciona?
    
    El detector analiza:
    - Uniformidad en longitud de oraciones
    - Uso de conectores formales
    - Estructura sistem√°tica
    - Vocabulario t√©cnico gen√©rico
    - Ausencia de errores
    - Patrones repetitivos
    
    ### Limitaciones
    - No es 100% preciso
    - Funciona mejor con textos de +100 palabras
    - Dise√±ado para espa√±ol
    
    ### Versi√≥n
    v1.0.0 - An√°lisis local gratuito
    """)
    
    st.markdown("---")
    st.markdown("Desarrollado con ‚ù§Ô∏è usando Streamlit")
